<!--
  Copyright(c) 2018 Advanced Micro Devices, Inc. All rights reserved.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files(the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions :

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
-->
    
    <Window x:Class="Frontend.VisualizationWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:oxy="clr-namespace:OxyPlot.Wpf;assembly=OxyPlot.Wpf"
        xmlns:local="clr-namespace:Frontend"
        mc:Ignorable="d"
        Title="OCAT"
        MinWidth="256"
        Width="684"
        Height="Auto"
        SizeToContent="Height"
        ResizeMode="NoResize"
        Background="Black" Style="{DynamicResource BenchmarkWindowStyle}" SnapsToDevicePixels="True" d:DesignWidth="256">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Simple Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

            <SolidColorBrush x:Key="CustomFontColor" Color="#ffffa21a"/>
            <SolidColorBrush x:Key="TabColor" Color="Black"/>
            <SolidColorBrush x:Key="SelectedTabColor" Color="LightGray"/>
            <SolidColorBrush x:Key="MouseOverColor" Color="#FFF5BD6C"/>

            <Style x:Key="Heading" TargetType="TextBlock">
                <Setter Property="Foreground" Value="#ff414141"/>
            </Style>

            <Style x:Key="LoadButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFF5BD6C"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="#FF888888"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="RemoveButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFF5BD6C"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="#FF888888"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="FrameDetailButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Foreground" Value="#FF888888"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="True">
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Type}" Value="{x:Static local:GraphType.FrameDetail}"/>
                            <Condition Binding="{Binding EnableFrameDetail}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Background" Value="#FF888888" />
                            <Setter Property="Foreground" Value="Black"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFF5BD6C"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="FrameGraphButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="{x:Static local:GraphType.Frametimes}">
                        <Setter Property="Background" Value="#FF888888"/>
                        <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFF5BD6C"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="MissedGraphButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="{x:Static local:GraphType.Misses}">
                        <Setter Property="Background" Value="#FF888888"/>
                        <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFF5BD6C"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ReprojectionsGraphButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="{x:Static local:GraphType.Reprojections}">
                        <Setter Property="Background" Value="#FF888888"/>
                        <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFF5BD6C"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="CustomTextBoxStyle" TargetType="TextBox">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="TextAlignment" Value="Right"/>
            </Style>

            <Style x:Key="CustomCheckBoxStyle" TargetType="CheckBox">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Border Grid.Column="0" HorizontalAlignment="Center" x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid x:Name="markGrid">
                                        <Path x:Name="optionMark" Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z" Fill="#ff414141" Margin="1" Opacity="0" Stretch="None"/>
                                        <Rectangle x:Name="indeterminateMark" Fill="#ff414141" Margin="2" Opacity="0"/>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="True">
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Padding" Value="4,-1,0,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MouseOverColor}"/>
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource MouseOverColor}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF5593FF"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="Transparent"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CustomFontColor}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource CustomFontColor}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFD9ECFF"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF3C77DD"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="SingleColorRadioButton" TargetType="{x:Type RadioButton}" >
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <BulletDecorator Background="Transparent">
                                <BulletDecorator.Bullet>
                                    <!--Let outer style define the size of the bullet-->
                                    <Grid Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}">
                                        <Border Name="OuterBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" CornerRadius="0" />
                                        <Border Name="InnerBorder" CornerRadius="0" Margin="0" Background="Transparent"/>
                                        <ContentPresenter Name="Content" Visibility="Hidden" Content="{TemplateBinding ContentPresenter.Content}" ContentTemplate="{TemplateBinding ContentPresenter.ContentTemplate}"/>
                                    </Grid>
                                </BulletDecorator.Bullet>
                            </BulletDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter TargetName="Content" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="InnerBorder" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="false">
                                    <Setter TargetName="InnerBorder" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="RadioButton.IsMouseOver" Value="true">
                                    <Setter TargetName="InnerBorder" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource MouseOverColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="BenchmarkWindowStyle" TargetType="{x:Type Window}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="WindowChrome.WindowChrome">
                    <Setter.Value>
                        <WindowChrome CaptionHeight="0" GlassFrameThickness="0" CornerRadius="0"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">
                            <Grid>
                                <Border>
                                    <DockPanel LastChildFill="True">
                                        <Border DockPanel.Dock="Top" Background="Black" Height="50"
                          MouseLeftButtonDown="Border_MouseLeftButtonDown">
                                            <DockPanel LastChildFill="False">
                                                <TextBlock Foreground="#ffa21a" Margin="10,0,0,0"
                             TextWrapping="NoWrap" Text="{TemplateBinding Title}"
                             VerticalAlignment="Center" FontSize="16"/>
                                                <Button x:Name="CloseButton" Height="30" Width="30"
                              DockPanel.Dock="Right"
                              Style="{DynamicResource BenchmarkMenuButtonStyle}"
                              Click="CloseButton_Click">
                                                    <Path Data="M0,0 L1,1 M0,1 L1,0" Stretch="Fill"
                              Stroke="White" StrokeThickness="2" Height="15" Width="15"/>
                                                </Button>
                                                <Button x:Name="MinimizeButton" Height="30" Width="30"
                          DockPanel.Dock="Right"
                          Style="{DynamicResource BenchmarkMenuButtonStyle}"
                          Click="MinimizeButton_Click">
                                                    <Path Data="M0,0 H1" Stretch="Fill"
                            Stroke="White" StrokeThickness="2" Height="15" Width="15"/>
                                                </Button>
                                            </DockPanel>
                                        </Border>
                                        <AdornerDecorator DockPanel.Dock="Bottom">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </AdornerDecorator>
                                    </DockPanel>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#F0F0F0" Offset="0.0"/>
                <GradientStop Color="#E5E5E5" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
            <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#ECF4FC" Offset="0.0"/>
                <GradientStop Color="#DCECFC" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
            <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
            <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
            <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
            <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
            <Style x:Key="CustomTabItem" TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Foreground" Value="{DynamicResource CustomFontColor}" />
                <Setter Property="Background" Value="Black"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Padding" Value="10,5,10,5"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0">
                                    <Border x:Name="innerBorder" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,1,0" Background="{StaticResource TabItem.Selected.Background}" Margin="-1" Opacity="0"/>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Panel.ZIndex" Value="100" />
                                    <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource CustomFontColor}" />
                                    <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource TabColor}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Border.IsMouseOver" Value="True"/>
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource MouseOverColor}" />
                                    <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource TabColor}" />
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                    <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="HideStackPanel" TargetType="StackPanel">
                <Setter Property="Visibility" Value="Hidden"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="{x:Static local:GraphType.FrameDetail}">
                        <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="{x:Static local:GraphType.Misses}">
                        <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <Grid Background="Black" UseLayoutRounding="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <TabControl x:Name="tabControl" MinHeight="100" Padding="0" Background="{StaticResource TabColor}" BorderBrush="Transparent" BorderThickness="0">
            <TabItem x:Name="homeTabItem" Header="Home" Style="{DynamicResource CustomTabItem}">
                <Grid Background="LightGray">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Margin="10,10,10,2" Grid.Row="0" x:Name="addSessionTextBlock" Style="{StaticResource Heading}" HorizontalAlignment="Left" Text="Add capture file"/>
                    <TextBox Margin="10,2,10,10" Grid.Row="1" x:Name="addSessionPath" Style="{StaticResource CustomTextBoxStyle}" HorizontalAlignment="Stretch" TextWrapping="Wrap" Background="DarkGray" Text="{Binding AddSessionPath, Mode=TwoWay}" HorizontalContentAlignment="Left"/>
                    <TextBlock Margin="10,0,10,0" Grid.Row="2" Grid.ColumnSpan="2" x:Name="dummyTextBlock" Style="{StaticResource Heading}" TextWrapping="Wrap" Text=""/>
                    <Canvas Margin="10,0,10,0" Grid.Column="0" Grid.RowSpan="2" Grid.Row="2" Height="35" Panel.ZIndex="1" Width="{Binding ActualWidth, ElementName=dummyTextBlock}">
                        <Expander Width="{Binding ActualWidth, ElementName=dummyTextBlock}" Grid.Column="0" Grid.Row="2" x:Name="removeSessionList" HorizontalAlignment="Stretch" Background="DarkGray" Header="Select capture">
                            <ListBox Margin="0,0,0,0" Grid.Column="0" Grid.Row="2" Name="listboxTest" Width="{Binding ActualWidth, ElementName=dummyTextBlock}" ItemsSource="{Binding Sessions, Mode=TwoWay}" SelectedIndex="{Binding SelectedIndex}" MaxHeight="65" MinHeight="25" SelectionChanged="listboxTest_SelectionChanged">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <Line
                                                X1="0" Y1="10"
                                                X2="15" Y2="10"
                                                Stroke="{Binding Color}"
                                                StrokeThickness="2"/>
                                            <TextBlock Margin="5, 0, 0, 0" Text="{Binding Filename}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </Expander>
                    </Canvas>
                    <Button Grid.Column="1" Grid.RowSpan="2" Grid.Row="0" Height="Auto" x:Name="addSessionButton" Style="{DynamicResource SimpleButton}" Click="AddSessionButton_Click" Background="LightGray">Select capture file to add</Button>
                    <Button Grid.Column="2" Grid.RowSpan="2" Grid.Row="0" Height="Auto" x:Name="loadSessionButton" Style="{StaticResource LoadButtonStyle}" Content="Load" Click="LoadSessionButton_Click" IsEnabled="{Binding Path=ReadyToLoadSession}" ToolTip="Add another session to visualization graph." />
                    <Button Grid.Column="2" Grid.RowSpan="2" Grid.Row="2" Height="75" x:Name="removeSessionButton" Style="{StaticResource RemoveButtonStyle}" Content="Remove capture file" Click="RemoveSessionButton_Click" IsEnabled="{Binding Path=SessionSelected}" ToolTip="Remove selected session from visualization graph."/>
                    <Button Grid.Column="0" Grid.Row="4" Height="75" x:Name="showSingleFrameButton" Style="{StaticResource FrameDetailButtonStyle}" Content="Show frame analysis" Click="showSingleFrameButton_Click" IsEnabled="{Binding Path=EnableFrameDetail}" ToolTip="Show a per frame graph with timestamps for each tracked event." />
                    <Button Grid.Column="1" Grid.Row="4" Height="75" x:Name="frameTimeButton" Style="{StaticResource FrameGraphButtonStyle}" Click="FrameTimeButton_Click" Content="Frame times"/>
                    <Button Grid.Column="2" Grid.Row="4" Height="75" x:Name="reprojectionButton" Style="{DynamicResource ReprojectionsGraphButtonStyle}" Click="ReprojectionButton_Click" Content="Reprojections"/>
                    <Button Grid.Column="3" Grid.Row="4" Height="75" x:Name="missedFramesButton" Style="{DynamicResource MissedGraphButtonStyle}" Click="MissedFramesButton_Click" Content="Capture statistics"/>
                    <Button Grid.Column="3" Grid.RowSpan="4" Grid.Row="0" Height="Auto" x:Name="saveGraphButton" Style="{StaticResource SimpleButton}" Content="Save graph" Click="SaveGraphButton_Click"/>
                </Grid>
            </TabItem>
            <TabItem x:Name="helpTabItem" Header="Controls" Style="{DynamicResource CustomTabItem}">
                <Grid Background="Black" Height="Auto" Margin="10,2,10,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column ="0" Foreground="{StaticResource CustomFontColor}">
                        <Bold>Action</Bold> <LineBreak/>
                        Pan<LineBreak/>
                        Zoom<LineBreak/>
                        Zoom by Rectangle<LineBreak/>
                        <LineBreak/>
                    </TextBlock>
                    <TextBlock Grid.Column ="1" Foreground="{StaticResource CustomFontColor}">
                        <Bold>Gesture</Bold> <LineBreak/>
                        Right mouse button<LineBreak/>
                        Mouse wheel<LineBreak/>
                        Ctrl+Right mouse button<LineBreak/>
                        Middle mouse button<LineBreak/>
                    </TextBlock>
                    <TextBlock Margin="35, 0, 0, 0" Grid.Column ="2" Foreground="{StaticResource CustomFontColor}">
                        <Bold>Action</Bold> <LineBreak/>
                        Reset<LineBreak/>
                        <LineBreak/>
                        Show tracker<LineBreak/>
                        Reset axes<LineBreak/>
                    </TextBlock>
                    <TextBlock Grid.Column ="3" Foreground="{StaticResource CustomFontColor}">
                        <Bold>Gesture</Bold> <LineBreak/>
                        Ctrl+Right mouse button double-click<LineBreak/>
                        Middle mouse button double-click<LineBreak/>
                        Left mouse button<LineBreak/>
                        'A', Home
                    </TextBlock>
                </Grid>
            </TabItem>
        </TabControl>
        <Grid Background="LightGray" Grid.Row="1" Height="300">
            <oxy:PlotView Model="{Binding Graph, Mode=TwoWay}" Margin="10,2,20,5" />
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal" Margin="20, 10, 40, 20" Style="{StaticResource HideStackPanel}">
                <TextBlock Text="{Binding AdditionalOption}" Margin="0, 3, 0, 0" />
                <Button HorizontalAlignment="Right" VerticalAlignment="Top" Style="{StaticResource SimpleButton}" BorderThickness="1" BorderBrush="Black" Height="20" x:Name="selectPreviousOption" Click="selectPreviousOption_Click" Background="White" Content="&lt;" IsEnabled="{Binding PrevOption}"/>
                <TextBlock Text="{Binding SubType}" HorizontalAlignment="Right" Margin="0, 3, 0, 0"/>
                <Button HorizontalAlignment="Right" VerticalAlignment="Top" Style="{StaticResource SimpleButton}" BorderThickness="1" BorderBrush="Black" Height="20" x:Name="selectNextOption" Click="selectNextOption_Click" Background="White" IsEnabled="{Binding NextOption}">&gt;</Button>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
